
# Sentiment Analysis using NLP and Logistic Regression

This project implements a **Sentiment Analysis model** to classify customer reviews into **positive** or **negative** sentiments. It uses **Natural Language Processing (NLP)** techniques for preprocessing and feature extraction, and applies a **Logistic Regression** model for classification. The entire workflow is implemented using **Python** in a **Jupyter Notebook** environment.

---

##  Objective

To build a machine learning pipeline that:
- Preprocesses raw text data
- Extracts meaningful features using **TF-IDF vectorization**
- Trains a **Logistic Regression classifier**
- Evaluates model performance on a labeled sentiment dataset

---

##  Tools and Libraries Used

| Library            | Purpose                                                      |
|--------------------|--------------------------------------------------------------|
| **Pandas**         | Data loading and manipulation                                |
| **NumPy**          | Numerical operations                                          |
| **Matplotlib / Seaborn** | Data visualization and analysis                            |
| **Scikit-learn**   | Model building, TF-IDF, training/testing split, and metrics  |
| **re**             | Regular expressions for text preprocessing                   |

---

##  Dataset Description

The dataset consists of two primary columns:
- **Review**: The raw text feedback from customers
- **Sentiment**: Binary label (1 = Positive, 0 = Negative)

The dataset can be sourced from open review datasets like IMDb, Amazon, or Yelp, or synthetically created for educational purposes.

---

#3 Project Workflow

### 1. Data Loading
- Read the dataset using `pandas`.
- Perform initial inspection and handle any missing values.

### 2. Text Preprocessing
- Convert all text to lowercase
- Remove punctuation, numbers, and special characters using `re`
- Remove stopwords
- (Optional) Apply stemming or lemmatization

### 3. Feature Extraction
- Convert cleaned text into numerical vectors using **TF-IDF vectorization** to reflect word importance.

### 4. Model Building
- Use **Logistic Regression** for binary classification.
- Split the data into training and testing sets using an 80-20 ratio.

### 5. Model Evaluation
- Evaluate model using:
  - Accuracy Score
  - Confusion Matrix
  - Precision, Recall, and F1-Score
- Visualize metrics using **confusion matrix plots**.

---

## Results and Insights

- The model demonstrates strong performance on the dataset, correctly identifying sentiment polarity.
- **TF-IDF** proved effective in distinguishing key sentiment-bearing terms.
- Logistic Regression, while simple, offered a solid baseline that can be improved with more complex models like **Naive Bayes**, **SVM**, or **neural networks**.

---

## Applications

- **Business Intelligence**: Understand customer satisfaction and feedback
- **Social Media Monitoring**: Track brand sentiment online
- **Product Reviews**: Automatically filter or sort reviews
- **Political Sentiment**: Analyze opinions in speeches or debates

---


